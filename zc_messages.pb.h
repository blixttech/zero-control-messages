/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_ZC_MESSAGES_PB_H_INCLUDED
#define PB_ZC_MESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
/* Control message API version. */
typedef enum zc_api_version {
    ZC_API_VERSION_1 = 0, /* API version 1. */
    ZC_API_VERSION_2 = 1 /* API version 2 (not in use yet). */
} zc_api_version_t;

/* The state of the power switch. */
typedef enum zc_switch_state {
    ZC_SWITCH_STATE_OPENED = 0, /* Switch openned */
    ZC_SWITCH_STATE_CLOSED = 1 /* Switch closed */
} zc_switch_state_t;

/* The state of the trip curve. */
typedef enum zc_device_state {
    ZC_DEVICE_STATE_UNDEFINED = 0, /* Undefined. */
    ZC_DEVICE_STATE_OPENED = 1, /* Device is in opened state. */
    ZC_DEVICE_STATE_CLOSED = 2, /* Device is in closed state. */
    ZC_DEVICE_STATE_STANDBY = 3, /* Device is in standby state. */
    ZC_DEVICE_STATE_TRANSIENT = 4 /* Device is in transient state. */
} zc_device_state_t;

/* The initial state of the trip curve. */
typedef enum zcs_device_ini_state {
    ZC_DEVICE_INI_STATE_OPENED = 0, /* Device opened */
    ZC_DEVICE_INI_STATE_CLOSED = 1, /* Device closed */
    ZC_DEVICE_INI_STATE_PREVIOUS = 2 /* Device's previous state */
} zcs_device_ini_state_t;

/* The event caused the device to trip. */
typedef enum zc_trip_cause {
    ZC_TRIP_CAUSE_NONE = 0,
    ZC_TRIP_CAUSE_EXT = 1, /* External/user event. */
    ZC_TRIP_CAUSE_OCP_HW = 2, /* Hardware-based over current protection. */
    ZC_TRIP_CAUSE_OCP_CURVE = 3, /* Trip curve-based over current protection. */
    ZC_TRIP_CAUSE_OCP_HW_TEST = 4, /* Hardware-based over current protection test. */
    ZC_TRIP_CAUSE_OTP = 5, /* Over temperature protection */
    ZC_TRIP_CAUSE_UVP = 6, /* Under voltage protection */
    ZC_TRIP_CAUSE_OVP = 7, /* Over voltage protection */
    ZC_TRIP_CAUSE_UFP = 8, /* Under frequency protection */
    ZC_TRIP_CAUSE_OFP = 9 /* Over frequency protection */
} zc_trip_cause_t;

/* Current flow direction. */
typedef enum zc_flow_direction {
    ZC_FLOW_DIRECTION_FORWARD = 0, /* Forward current flow. */
    ZC_FLOW_DIRECTION_BACKWARD = 1 /* Backward current flow. */
} zc_flow_direction_t;

typedef enum zc_device_cmd {
    ZC_DEVICE_CMD_OPEN = 0, /* Open the power switch. */
    ZC_DEVICE_CMD_CLOSE = 1, /* Close the power switch. */
    ZC_DEVICE_CMD_TOGGLE = 2 /* Toggle the power switch. */
} zc_device_cmd_t;

/* Temperature sensor location. */
typedef enum zc_temp_loc {
    ZC_TEMP_LOC_AMB = 0, /* Ambient temperature. */
    ZC_TEMP_LOC_MCU_1 = 1, /* MCU 1 temperature. */
    ZC_TEMP_LOC_MCU_2 = 2, /* MCU 2 temperature. */
    ZC_TEMP_LOC_MCU_3 = 3, /* MCU 3 temperature. */
    ZC_TEMP_LOC_MCU_4 = 4, /* MCU 4 temperature. */
    ZC_TEMP_LOC_BRD_1 = 5, /* Temeperature of board 1. */
    ZC_TEMP_LOC_BRD_2 = 6, /* Temeperature of board 2. */
    ZC_TEMP_LOC_BRD_3 = 7, /* Temeperature of board 3. */
    ZC_TEMP_LOC_BRD_4 = 8 /* Temeperature of board 4. */
} zc_temp_loc_t;

/* Calibration type. */
typedef enum zc_calib_type {
    ZC_CALIB_TYPE_VOLTAGE_1 = 0, /* Voltage 1 calibration. */
    ZC_CALIB_TYPE_VOLTAGE_2 = 1, /* Voltage 2 calibration. */
    ZC_CALIB_TYPE_CURRENT_1 = 2, /* Current 1 calibration. */
    ZC_CALIB_TYPE_CURRENT_2 = 3 /* Current 2 calibration. */
} zc_calib_type_t;

/* Struct definitions */
typedef PB_BYTES_ARRAY_T(16) zc_version_uuid_t;
typedef PB_BYTES_ARRAY_T(3) zc_version_sw_ver_t;
typedef PB_BYTES_ARRAY_T(4) zc_version_hw_ver_t;
typedef PB_BYTES_ARRAY_T(8) zc_version_link_addr_t;
/* API version and device information. */
typedef struct zc_version {
    zc_api_version_t api; /* API version. */
    bool has_uuid;
    zc_version_uuid_t uuid; /* UUID of the device. */
    bool has_sw_ver;
    zc_version_sw_ver_t sw_ver; /* Firmware version number. */
    bool has_hw_ver;
    zc_version_hw_ver_t hw_ver; /* Hardware version numbers. */
    bool has_link_addr;
    zc_version_link_addr_t link_addr; /* Link address of the device. */
    bool has_sec_en;
    bool sec_en; /* Set to true if secure access is enabled. */
} zc_version_t;

/* Temperature. */
typedef struct zc_temperature {
    zc_temp_loc_t loc; /* Location of the temperature measured. */
    int32_t value; /* Temperature reading in Celsius. */
} zc_temperature_t;

/* Device status. */
typedef struct zc_status {
    uint32_t uptime; /* Uptime in milliseconds. */
    zc_switch_state_t switch_state; /* Switch state. */
    zc_device_state_t device_state; /* Device state. */
    zc_trip_cause_t cause; /* Trip cause. */
    uint32_t current; /* RMS current in milliamperes. */
    uint32_t voltage; /* RMS voltage in millivolts. */
    uint32_t freq; /* Supply frequency in millihertz. */
    zc_flow_direction_t direction; /* Current flow direction. */
    pb_size_t temp_count;
    zc_temperature_t temp[4]; /* Temperature readings. */
} zc_status_t;

/* A point on the trip curve. */
typedef struct zc_curve_point {
    uint32_t limit; /* Current limit in amperes. */
    uint32_t duration; /* Duration to be spent in milliseconds. */
} zc_curve_point_t;

/* The initial state configuration. */
typedef struct zc_ini_state_config {
    zcs_device_ini_state_t state; /* Initial trip curve state. */
} zc_ini_state_config_t;

/* Modulation control configuration. */
typedef struct zc_csom_mod_config {
    uint32_t closed; /* Number of zero-crossings to be stay opened */
    uint32_t period; /* Total number of zero-crossings to be considered as
the period. */
} zc_csom_mod_config_t;

/* Closed-state operation mode configuration. */
typedef struct zc_csom_config {
    bool enabled; /* Set to true if CSOM enabled. */
    pb_size_t which_config;
    union {
        zc_csom_mod_config_t mod;
    } config;
} zc_csom_config_t;

/* Trip curve configuration. */
typedef struct zc_curve_config {
    pb_size_t points_count;
    zc_curve_point_t points[16]; /* Trip curve points. */
    zc_flow_direction_t direction; /* Current flow direction */
} zc_curve_config_t;

/* Hardware-based overcurrent protection configuration. */
typedef struct zc_ocp_hw_config {
    uint32_t limit; /* Current limit in amperes. */
    uint32_t filter; /* Jitter filter in nano seconds. */
    uint32_t rec_delay; /* Recovery time delay in microseconds. */
    uint32_t rec_attempts; /* Number of recovery attempts. */
    bool rec_en; /* Set to true if recovery is enabled. */
    uint32_t rec_reset_timeout; /* Recovery reset timeout in milliseconds. */
} zc_ocp_hw_config_t;

/* Over/under voltage protection configuration. */
typedef struct zc_ouvp_config {
    uint32_t lower; /* Lower limit in volts. */
    uint32_t upper; /* Upper limit in volts. */
    bool enabled; /* Set to true if enabled. */
} zc_ouvp_config_t;

/* Over/under frequency protection configuration. */
typedef struct zc_oufp_config {
    uint32_t lower; /* Lower limit in millihertz. */
    uint32_t upper; /* Upper limit in millihertz. */
    bool enabled; /* Set to true if enabled. */
} zc_oufp_config_t;

/* Notification configuration. */
typedef struct zc_notif_config {
    uint32_t interval; /* Notification interval in milliseconds. */
} zc_notif_config_t;

typedef PB_BYTES_ARRAY_T(8) zc_calib_config_arg_t;
/* Calibration configuration. */
typedef struct zc_calib_config {
    zc_calib_type_t type;
    zc_calib_config_arg_t arg;
} zc_calib_config_t;

/* Device configuration. */
typedef struct zc_config {
    pb_size_t which_config;
    union {
        zc_curve_config_t curve;
        zc_csom_config_t csom; /* Closed-state operation mode. */
        zc_ocp_hw_config_t ocp_hw; /* Over current protection. */
        zc_ouvp_config_t ouvp; /* Over/under voltage protection. */
        zc_oufp_config_t oufp; /* Over/under frequency protection. */
        zc_notif_config_t notif; /* Notification. */
        zc_calib_config_t calib; /* Calibration. */
        zc_ini_state_config_t ini; /* Initial stste configuration. */
    } config;
} zc_config_t;

/* Version request. */
typedef struct zc_request_version {
    uint32_t null;
} zc_request_version_t;

/* Status request. */
typedef struct zc_request_status {
    uint32_t null;
} zc_request_status_t;

/* Device command request. */
typedef struct zc_request_device_cmd {
    zc_device_cmd_t cmd;
} zc_request_device_cmd_t;

/* Set configuration request */
typedef struct zc_request_set_config {
    bool has_config;
    zc_config_t config;
} zc_request_set_config_t;

/* Get curve configuration request. */
typedef struct zc_request_get_config_curve {
    zc_flow_direction_t direction;
} zc_request_get_config_curve_t;

/* Get closed-state operation mode configuration request. */
typedef struct zc_request_get_config_csom {
    uint32_t null;
} zc_request_get_config_csom_t;

/* Get hardware-based overcurrent protection configuration request. */
typedef struct zc_request_get_config_ocp_hw {
    uint32_t null;
} zc_request_get_config_ocp_hw_t;

/* Get over/under voltage protection configuration request. */
typedef struct zc_request_get_config_ouvp {
    uint32_t null;
} zc_request_get_config_ouvp_t;

/* Get over/under frequency protection configuration request. */
typedef struct zc_request_get_config_oufp {
    uint32_t null;
} zc_request_get_config_oufp_t;

/* Get notification configuration request. */
typedef struct zc_request_get_config_notif {
    uint32_t null;
} zc_request_get_config_notif_t;

/* Get calibration configuration request. */
typedef struct zc_request_get_config_calib {
    zc_calib_type_t type;
} zc_request_get_config_calib_t;

/* Get initial configuration request. */
typedef struct zc_request_get_config_ini {
    uint32_t null;
} zc_request_get_config_ini_t;

/* Get configuration. */
typedef struct zc_request_get_config {
    pb_size_t which_config;
    union {
        zc_request_get_config_curve_t curve; /* Trip curve */
        zc_request_get_config_csom_t csom; /* Closed-state operation mode. */
        zc_request_get_config_ocp_hw_t ocp_hw; /* Over current protection. */
        zc_request_get_config_ouvp_t ouvp; /* Over/under voltage protection. */
        zc_request_get_config_oufp_t oufp; /* Over/under frequency protection. */
        zc_request_get_config_notif_t notif; /* Notification. */
        zc_request_get_config_calib_t calib; /* Calibration. */
        zc_request_get_config_ini_t ini; /* Initial configuration. */
    } config;
} zc_request_get_config_t;

/* Error/status information. */
typedef struct zc_error {
    uint32_t code; /* Non-zero values indicates an error condition. */
} zc_error_t;

/* Reponse message. */
typedef struct zc_response {
    pb_size_t which_res;
    union {
        zc_version_t version;
        zc_status_t status;
        zc_config_t config;
        zc_error_t error;
    } res;
} zc_response_t;

/* Request message. */
typedef struct zc_request {
    pb_size_t which_req;
    union {
        zc_request_version_t version;
        zc_request_status_t status;
        zc_request_device_cmd_t cmd;
        zc_request_set_config_t set_config;
        zc_request_get_config_t get_config;
    } req;
} zc_request_t;

/* Control message. */
typedef struct zc_message {
    pb_size_t which_msg;
    union {
        zc_request_t req;
        zc_response_t res;
    } msg;
} zc_message_t;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _ZC_API_VERSION_MIN ZC_API_VERSION_1
#define _ZC_API_VERSION_MAX ZC_API_VERSION_2
#define _ZC_API_VERSION_ARRAYSIZE ((zc_api_version_t)(ZC_API_VERSION_2+1))
#define ZCApiVersion_ZC_API_VERSION_1 ZC_API_VERSION_1
#define ZCApiVersion_ZC_API_VERSION_2 ZC_API_VERSION_2

#define _ZC_SWITCH_STATE_MIN ZC_SWITCH_STATE_OPENED
#define _ZC_SWITCH_STATE_MAX ZC_SWITCH_STATE_CLOSED
#define _ZC_SWITCH_STATE_ARRAYSIZE ((zc_switch_state_t)(ZC_SWITCH_STATE_CLOSED+1))
#define ZCSwitchState_ZC_SWITCH_STATE_OPENED ZC_SWITCH_STATE_OPENED
#define ZCSwitchState_ZC_SWITCH_STATE_CLOSED ZC_SWITCH_STATE_CLOSED

#define _ZC_DEVICE_STATE_MIN ZC_DEVICE_STATE_UNDEFINED
#define _ZC_DEVICE_STATE_MAX ZC_DEVICE_STATE_TRANSIENT
#define _ZC_DEVICE_STATE_ARRAYSIZE ((zc_device_state_t)(ZC_DEVICE_STATE_TRANSIENT+1))
#define ZCDeviceState_ZC_DEVICE_STATE_UNDEFINED ZC_DEVICE_STATE_UNDEFINED
#define ZCDeviceState_ZC_DEVICE_STATE_OPENED ZC_DEVICE_STATE_OPENED
#define ZCDeviceState_ZC_DEVICE_STATE_CLOSED ZC_DEVICE_STATE_CLOSED
#define ZCDeviceState_ZC_DEVICE_STATE_STANDBY ZC_DEVICE_STATE_STANDBY
#define ZCDeviceState_ZC_DEVICE_STATE_TRANSIENT ZC_DEVICE_STATE_TRANSIENT

#define _ZCS_DEVICE_INI_STATE_MIN ZC_DEVICE_INI_STATE_OPENED
#define _ZCS_DEVICE_INI_STATE_MAX ZC_DEVICE_INI_STATE_PREVIOUS
#define _ZCS_DEVICE_INI_STATE_ARRAYSIZE ((zcs_device_ini_state_t)(ZC_DEVICE_INI_STATE_PREVIOUS+1))
#define ZCSDeviceIniState_ZC_DEVICE_INI_STATE_OPENED ZC_DEVICE_INI_STATE_OPENED
#define ZCSDeviceIniState_ZC_DEVICE_INI_STATE_CLOSED ZC_DEVICE_INI_STATE_CLOSED
#define ZCSDeviceIniState_ZC_DEVICE_INI_STATE_PREVIOUS ZC_DEVICE_INI_STATE_PREVIOUS

#define _ZC_TRIP_CAUSE_MIN ZC_TRIP_CAUSE_NONE
#define _ZC_TRIP_CAUSE_MAX ZC_TRIP_CAUSE_OFP
#define _ZC_TRIP_CAUSE_ARRAYSIZE ((zc_trip_cause_t)(ZC_TRIP_CAUSE_OFP+1))
#define ZCTripCause_ZC_TRIP_CAUSE_NONE ZC_TRIP_CAUSE_NONE
#define ZCTripCause_ZC_TRIP_CAUSE_EXT ZC_TRIP_CAUSE_EXT
#define ZCTripCause_ZC_TRIP_CAUSE_OCP_HW ZC_TRIP_CAUSE_OCP_HW
#define ZCTripCause_ZC_TRIP_CAUSE_OCP_CURVE ZC_TRIP_CAUSE_OCP_CURVE
#define ZCTripCause_ZC_TRIP_CAUSE_OCP_HW_TEST ZC_TRIP_CAUSE_OCP_HW_TEST
#define ZCTripCause_ZC_TRIP_CAUSE_OTP ZC_TRIP_CAUSE_OTP
#define ZCTripCause_ZC_TRIP_CAUSE_UVP ZC_TRIP_CAUSE_UVP
#define ZCTripCause_ZC_TRIP_CAUSE_OVP ZC_TRIP_CAUSE_OVP
#define ZCTripCause_ZC_TRIP_CAUSE_UFP ZC_TRIP_CAUSE_UFP
#define ZCTripCause_ZC_TRIP_CAUSE_OFP ZC_TRIP_CAUSE_OFP

#define _ZC_FLOW_DIRECTION_MIN ZC_FLOW_DIRECTION_FORWARD
#define _ZC_FLOW_DIRECTION_MAX ZC_FLOW_DIRECTION_BACKWARD
#define _ZC_FLOW_DIRECTION_ARRAYSIZE ((zc_flow_direction_t)(ZC_FLOW_DIRECTION_BACKWARD+1))
#define ZCFlowDirection_ZC_FLOW_DIRECTION_FORWARD ZC_FLOW_DIRECTION_FORWARD
#define ZCFlowDirection_ZC_FLOW_DIRECTION_BACKWARD ZC_FLOW_DIRECTION_BACKWARD

#define _ZC_DEVICE_CMD_MIN ZC_DEVICE_CMD_OPEN
#define _ZC_DEVICE_CMD_MAX ZC_DEVICE_CMD_TOGGLE
#define _ZC_DEVICE_CMD_ARRAYSIZE ((zc_device_cmd_t)(ZC_DEVICE_CMD_TOGGLE+1))
#define ZCDeviceCmd_ZC_DEVICE_CMD_OPEN ZC_DEVICE_CMD_OPEN
#define ZCDeviceCmd_ZC_DEVICE_CMD_CLOSE ZC_DEVICE_CMD_CLOSE
#define ZCDeviceCmd_ZC_DEVICE_CMD_TOGGLE ZC_DEVICE_CMD_TOGGLE

#define _ZC_TEMP_LOC_MIN ZC_TEMP_LOC_AMB
#define _ZC_TEMP_LOC_MAX ZC_TEMP_LOC_BRD_4
#define _ZC_TEMP_LOC_ARRAYSIZE ((zc_temp_loc_t)(ZC_TEMP_LOC_BRD_4+1))
#define ZCTempLoc_ZC_TEMP_LOC_AMB ZC_TEMP_LOC_AMB
#define ZCTempLoc_ZC_TEMP_LOC_MCU_1 ZC_TEMP_LOC_MCU_1
#define ZCTempLoc_ZC_TEMP_LOC_MCU_2 ZC_TEMP_LOC_MCU_2
#define ZCTempLoc_ZC_TEMP_LOC_MCU_3 ZC_TEMP_LOC_MCU_3
#define ZCTempLoc_ZC_TEMP_LOC_MCU_4 ZC_TEMP_LOC_MCU_4
#define ZCTempLoc_ZC_TEMP_LOC_BRD_1 ZC_TEMP_LOC_BRD_1
#define ZCTempLoc_ZC_TEMP_LOC_BRD_2 ZC_TEMP_LOC_BRD_2
#define ZCTempLoc_ZC_TEMP_LOC_BRD_3 ZC_TEMP_LOC_BRD_3
#define ZCTempLoc_ZC_TEMP_LOC_BRD_4 ZC_TEMP_LOC_BRD_4

#define _ZC_CALIB_TYPE_MIN ZC_CALIB_TYPE_VOLTAGE_1
#define _ZC_CALIB_TYPE_MAX ZC_CALIB_TYPE_CURRENT_2
#define _ZC_CALIB_TYPE_ARRAYSIZE ((zc_calib_type_t)(ZC_CALIB_TYPE_CURRENT_2+1))
#define ZCCalibType_ZC_CALIB_TYPE_VOLTAGE_1 ZC_CALIB_TYPE_VOLTAGE_1
#define ZCCalibType_ZC_CALIB_TYPE_VOLTAGE_2 ZC_CALIB_TYPE_VOLTAGE_2
#define ZCCalibType_ZC_CALIB_TYPE_CURRENT_1 ZC_CALIB_TYPE_CURRENT_1
#define ZCCalibType_ZC_CALIB_TYPE_CURRENT_2 ZC_CALIB_TYPE_CURRENT_2

#define zc_version_t_api_ENUMTYPE zc_api_version_t

#define zc_temperature_t_loc_ENUMTYPE zc_temp_loc_t

#define zc_status_t_switch_state_ENUMTYPE zc_switch_state_t
#define zc_status_t_device_state_ENUMTYPE zc_device_state_t
#define zc_status_t_cause_ENUMTYPE zc_trip_cause_t
#define zc_status_t_direction_ENUMTYPE zc_flow_direction_t


#define zc_ini_state_config_t_state_ENUMTYPE zcs_device_ini_state_t



#define zc_curve_config_t_direction_ENUMTYPE zc_flow_direction_t





#define zc_calib_config_t_type_ENUMTYPE zc_calib_type_t




#define zc_request_device_cmd_t_cmd_ENUMTYPE zc_device_cmd_t


#define zc_request_get_config_curve_t_direction_ENUMTYPE zc_flow_direction_t






#define zc_request_get_config_calib_t_type_ENUMTYPE zc_calib_type_t








/* Initializer values for message structs */
#define ZC_VERSION_INIT_DEFAULT                  {_ZC_API_VERSION_MIN, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0}
#define ZC_TEMPERATURE_INIT_DEFAULT              {_ZC_TEMP_LOC_MIN, 0}
#define ZC_STATUS_INIT_DEFAULT                   {0, _ZC_SWITCH_STATE_MIN, _ZC_DEVICE_STATE_MIN, _ZC_TRIP_CAUSE_MIN, 0, 0, 0, _ZC_FLOW_DIRECTION_MIN, 0, {ZC_TEMPERATURE_INIT_DEFAULT, ZC_TEMPERATURE_INIT_DEFAULT, ZC_TEMPERATURE_INIT_DEFAULT, ZC_TEMPERATURE_INIT_DEFAULT}}
#define ZC_CURVE_POINT_INIT_DEFAULT              {0, 0}
#define ZC_INI_STATE_CONFIG_INIT_DEFAULT         {_ZCS_DEVICE_INI_STATE_MIN}
#define ZC_CSOM_MOD_CONFIG_INIT_DEFAULT          {0, 0}
#define ZC_CSOM_CONFIG_INIT_DEFAULT              {0, 0, {ZC_CSOM_MOD_CONFIG_INIT_DEFAULT}}
#define ZC_CURVE_CONFIG_INIT_DEFAULT             {0, {ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT, ZC_CURVE_POINT_INIT_DEFAULT}, _ZC_FLOW_DIRECTION_MIN}
#define ZC_OCP_HW_CONFIG_INIT_DEFAULT            {0, 0, 0, 0, 0, 0}
#define ZC_OUVP_CONFIG_INIT_DEFAULT              {0, 0, 0}
#define ZC_OUFP_CONFIG_INIT_DEFAULT              {0, 0, 0}
#define ZC_NOTIF_CONFIG_INIT_DEFAULT             {0}
#define ZC_CALIB_CONFIG_INIT_DEFAULT             {_ZC_CALIB_TYPE_MIN, {0, {0}}}
#define ZC_CONFIG_INIT_DEFAULT                   {0, {ZC_CURVE_CONFIG_INIT_DEFAULT}}
#define ZC_REQUEST_VERSION_INIT_DEFAULT          {0}
#define ZC_REQUEST_STATUS_INIT_DEFAULT           {0}
#define ZC_REQUEST_DEVICE_CMD_INIT_DEFAULT       {_ZC_DEVICE_CMD_MIN}
#define ZC_REQUEST_SET_CONFIG_INIT_DEFAULT       {false, ZC_CONFIG_INIT_DEFAULT}
#define ZC_REQUEST_GET_CONFIG_CURVE_INIT_DEFAULT {_ZC_FLOW_DIRECTION_MIN}
#define ZC_REQUEST_GET_CONFIG_CSOM_INIT_DEFAULT  {0}
#define ZC_REQUEST_GET_CONFIG_OCP_HW_INIT_DEFAULT {0}
#define ZC_REQUEST_GET_CONFIG_OUVP_INIT_DEFAULT  {0}
#define ZC_REQUEST_GET_CONFIG_OUFP_INIT_DEFAULT  {0}
#define ZC_REQUEST_GET_CONFIG_NOTIF_INIT_DEFAULT {0}
#define ZC_REQUEST_GET_CONFIG_CALIB_INIT_DEFAULT {_ZC_CALIB_TYPE_MIN}
#define ZC_REQUEST_GET_CONFIG_INI_INIT_DEFAULT   {0}
#define ZC_REQUEST_GET_CONFIG_INIT_DEFAULT       {0, {ZC_REQUEST_GET_CONFIG_CURVE_INIT_DEFAULT}}
#define ZC_ERROR_INIT_DEFAULT                    {0}
#define ZC_RESPONSE_INIT_DEFAULT                 {0, {ZC_VERSION_INIT_DEFAULT}}
#define ZC_REQUEST_INIT_DEFAULT                  {0, {ZC_REQUEST_VERSION_INIT_DEFAULT}}
#define ZC_MESSAGE_INIT_DEFAULT                  {0, {ZC_REQUEST_INIT_DEFAULT}}
#define ZC_VERSION_INIT_ZERO                     {_ZC_API_VERSION_MIN, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, {0, {0}}, false, 0}
#define ZC_TEMPERATURE_INIT_ZERO                 {_ZC_TEMP_LOC_MIN, 0}
#define ZC_STATUS_INIT_ZERO                      {0, _ZC_SWITCH_STATE_MIN, _ZC_DEVICE_STATE_MIN, _ZC_TRIP_CAUSE_MIN, 0, 0, 0, _ZC_FLOW_DIRECTION_MIN, 0, {ZC_TEMPERATURE_INIT_ZERO, ZC_TEMPERATURE_INIT_ZERO, ZC_TEMPERATURE_INIT_ZERO, ZC_TEMPERATURE_INIT_ZERO}}
#define ZC_CURVE_POINT_INIT_ZERO                 {0, 0}
#define ZC_INI_STATE_CONFIG_INIT_ZERO            {_ZCS_DEVICE_INI_STATE_MIN}
#define ZC_CSOM_MOD_CONFIG_INIT_ZERO             {0, 0}
#define ZC_CSOM_CONFIG_INIT_ZERO                 {0, 0, {ZC_CSOM_MOD_CONFIG_INIT_ZERO}}
#define ZC_CURVE_CONFIG_INIT_ZERO                {0, {ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO, ZC_CURVE_POINT_INIT_ZERO}, _ZC_FLOW_DIRECTION_MIN}
#define ZC_OCP_HW_CONFIG_INIT_ZERO               {0, 0, 0, 0, 0, 0}
#define ZC_OUVP_CONFIG_INIT_ZERO                 {0, 0, 0}
#define ZC_OUFP_CONFIG_INIT_ZERO                 {0, 0, 0}
#define ZC_NOTIF_CONFIG_INIT_ZERO                {0}
#define ZC_CALIB_CONFIG_INIT_ZERO                {_ZC_CALIB_TYPE_MIN, {0, {0}}}
#define ZC_CONFIG_INIT_ZERO                      {0, {ZC_CURVE_CONFIG_INIT_ZERO}}
#define ZC_REQUEST_VERSION_INIT_ZERO             {0}
#define ZC_REQUEST_STATUS_INIT_ZERO              {0}
#define ZC_REQUEST_DEVICE_CMD_INIT_ZERO          {_ZC_DEVICE_CMD_MIN}
#define ZC_REQUEST_SET_CONFIG_INIT_ZERO          {false, ZC_CONFIG_INIT_ZERO}
#define ZC_REQUEST_GET_CONFIG_CURVE_INIT_ZERO    {_ZC_FLOW_DIRECTION_MIN}
#define ZC_REQUEST_GET_CONFIG_CSOM_INIT_ZERO     {0}
#define ZC_REQUEST_GET_CONFIG_OCP_HW_INIT_ZERO   {0}
#define ZC_REQUEST_GET_CONFIG_OUVP_INIT_ZERO     {0}
#define ZC_REQUEST_GET_CONFIG_OUFP_INIT_ZERO     {0}
#define ZC_REQUEST_GET_CONFIG_NOTIF_INIT_ZERO    {0}
#define ZC_REQUEST_GET_CONFIG_CALIB_INIT_ZERO    {_ZC_CALIB_TYPE_MIN}
#define ZC_REQUEST_GET_CONFIG_INI_INIT_ZERO      {0}
#define ZC_REQUEST_GET_CONFIG_INIT_ZERO          {0, {ZC_REQUEST_GET_CONFIG_CURVE_INIT_ZERO}}
#define ZC_ERROR_INIT_ZERO                       {0}
#define ZC_RESPONSE_INIT_ZERO                    {0, {ZC_VERSION_INIT_ZERO}}
#define ZC_REQUEST_INIT_ZERO                     {0, {ZC_REQUEST_VERSION_INIT_ZERO}}
#define ZC_MESSAGE_INIT_ZERO                     {0, {ZC_REQUEST_INIT_ZERO}}

/* Field tags (for use in manual encoding/decoding) */
#define ZC_VERSION_API_TAG                       1
#define ZC_VERSION_UUID_TAG                      2
#define ZC_VERSION_SW_VER_TAG                    3
#define ZC_VERSION_HW_VER_TAG                    4
#define ZC_VERSION_LINK_ADDR_TAG                 5
#define ZC_VERSION_SEC_EN_TAG                    6
#define ZC_TEMPERATURE_LOC_TAG                   1
#define ZC_TEMPERATURE_VALUE_TAG                 2
#define ZC_STATUS_UPTIME_TAG                     1
#define ZC_STATUS_SWITCH_STATE_TAG               2
#define ZC_STATUS_DEVICE_STATE_TAG               3
#define ZC_STATUS_CAUSE_TAG                      4
#define ZC_STATUS_CURRENT_TAG                    5
#define ZC_STATUS_VOLTAGE_TAG                    6
#define ZC_STATUS_FREQ_TAG                       7
#define ZC_STATUS_DIRECTION_TAG                  8
#define ZC_STATUS_TEMP_TAG                       9
#define ZC_CURVE_POINT_LIMIT_TAG                 1
#define ZC_CURVE_POINT_DURATION_TAG              2
#define ZC_INI_STATE_CONFIG_STATE_TAG            1
#define ZC_CSOM_MOD_CONFIG_CLOSED_TAG            1
#define ZC_CSOM_MOD_CONFIG_PERIOD_TAG            2
#define ZC_CSOM_CONFIG_ENABLED_TAG               1
#define ZC_CSOM_CONFIG_MOD_TAG                   2
#define ZC_CURVE_CONFIG_POINTS_TAG               1
#define ZC_CURVE_CONFIG_DIRECTION_TAG            2
#define ZC_OCP_HW_CONFIG_LIMIT_TAG               1
#define ZC_OCP_HW_CONFIG_FILTER_TAG              2
#define ZC_OCP_HW_CONFIG_REC_DELAY_TAG           3
#define ZC_OCP_HW_CONFIG_REC_ATTEMPTS_TAG        4
#define ZC_OCP_HW_CONFIG_REC_EN_TAG              5
#define ZC_OCP_HW_CONFIG_REC_RESET_TIMEOUT_TAG   6
#define ZC_OUVP_CONFIG_LOWER_TAG                 1
#define ZC_OUVP_CONFIG_UPPER_TAG                 2
#define ZC_OUVP_CONFIG_ENABLED_TAG               3
#define ZC_OUFP_CONFIG_LOWER_TAG                 1
#define ZC_OUFP_CONFIG_UPPER_TAG                 2
#define ZC_OUFP_CONFIG_ENABLED_TAG               3
#define ZC_NOTIF_CONFIG_INTERVAL_TAG             1
#define ZC_CALIB_CONFIG_TYPE_TAG                 1
#define ZC_CALIB_CONFIG_ARG_TAG                  2
#define ZC_CONFIG_CURVE_TAG                      1
#define ZC_CONFIG_CSOM_TAG                       2
#define ZC_CONFIG_OCP_HW_TAG                     3
#define ZC_CONFIG_OUVP_TAG                       4
#define ZC_CONFIG_OUFP_TAG                       5
#define ZC_CONFIG_NOTIF_TAG                      6
#define ZC_CONFIG_CALIB_TAG                      7
#define ZC_CONFIG_INI_TAG                        8
#define ZC_REQUEST_VERSION_NULL_TAG              1
#define ZC_REQUEST_STATUS_NULL_TAG               1
#define ZC_REQUEST_DEVICE_CMD_CMD_TAG            1
#define ZC_REQUEST_SET_CONFIG_CONFIG_TAG         1
#define ZC_REQUEST_GET_CONFIG_CURVE_DIRECTION_TAG 1
#define ZC_REQUEST_GET_CONFIG_CSOM_NULL_TAG      1
#define ZC_REQUEST_GET_CONFIG_OCP_HW_NULL_TAG    1
#define ZC_REQUEST_GET_CONFIG_OUVP_NULL_TAG      1
#define ZC_REQUEST_GET_CONFIG_OUFP_NULL_TAG      1
#define ZC_REQUEST_GET_CONFIG_NOTIF_NULL_TAG     1
#define ZC_REQUEST_GET_CONFIG_CALIB_TYPE_TAG     1
#define ZC_REQUEST_GET_CONFIG_INI_NULL_TAG       1
#define ZC_REQUEST_GET_CONFIG_CURVE_TAG          1
#define ZC_REQUEST_GET_CONFIG_CSOM_TAG           2
#define ZC_REQUEST_GET_CONFIG_OCP_HW_TAG         3
#define ZC_REQUEST_GET_CONFIG_OUVP_TAG           4
#define ZC_REQUEST_GET_CONFIG_OUFP_TAG           5
#define ZC_REQUEST_GET_CONFIG_NOTIF_TAG          6
#define ZC_REQUEST_GET_CONFIG_CALIB_TAG          7
#define ZC_REQUEST_GET_CONFIG_INI_TAG            8
#define ZC_ERROR_CODE_TAG                        1
#define ZC_RESPONSE_VERSION_TAG                  1
#define ZC_RESPONSE_STATUS_TAG                   2
#define ZC_RESPONSE_CONFIG_TAG                   3
#define ZC_RESPONSE_ERROR_TAG                    4
#define ZC_REQUEST_VERSION_TAG                   1
#define ZC_REQUEST_STATUS_TAG                    2
#define ZC_REQUEST_CMD_TAG                       3
#define ZC_REQUEST_SET_CONFIG_TAG                4
#define ZC_REQUEST_GET_CONFIG_TAG                5
#define ZC_MESSAGE_REQ_TAG                       1
#define ZC_MESSAGE_RES_TAG                       2

/* Struct field encoding specification for nanopb */
#define ZC_VERSION_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    api,               1) \
X(a, STATIC,   OPTIONAL, BYTES,    uuid,              2) \
X(a, STATIC,   OPTIONAL, BYTES,    sw_ver,            3) \
X(a, STATIC,   OPTIONAL, BYTES,    hw_ver,            4) \
X(a, STATIC,   OPTIONAL, BYTES,    link_addr,         5) \
X(a, STATIC,   OPTIONAL, BOOL,     sec_en,            6)
#define ZC_VERSION_CALLBACK NULL
#define ZC_VERSION_DEFAULT NULL

#define ZC_TEMPERATURE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    loc,               1) \
X(a, STATIC,   SINGULAR, INT32,    value,             2)
#define ZC_TEMPERATURE_CALLBACK NULL
#define ZC_TEMPERATURE_DEFAULT NULL

#define ZC_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   uptime,            1) \
X(a, STATIC,   SINGULAR, UENUM,    switch_state,      2) \
X(a, STATIC,   SINGULAR, UENUM,    device_state,      3) \
X(a, STATIC,   SINGULAR, UENUM,    cause,             4) \
X(a, STATIC,   SINGULAR, UINT32,   current,           5) \
X(a, STATIC,   SINGULAR, UINT32,   voltage,           6) \
X(a, STATIC,   SINGULAR, UINT32,   freq,              7) \
X(a, STATIC,   SINGULAR, UENUM,    direction,         8) \
X(a, STATIC,   REPEATED, MESSAGE,  temp,              9)
#define ZC_STATUS_CALLBACK NULL
#define ZC_STATUS_DEFAULT NULL
#define zc_status_t_temp_MSGTYPE zc_temperature_t

#define ZC_CURVE_POINT_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   limit,             1) \
X(a, STATIC,   SINGULAR, UINT32,   duration,          2)
#define ZC_CURVE_POINT_CALLBACK NULL
#define ZC_CURVE_POINT_DEFAULT NULL

#define ZC_INI_STATE_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1)
#define ZC_INI_STATE_CONFIG_CALLBACK NULL
#define ZC_INI_STATE_CONFIG_DEFAULT NULL

#define ZC_CSOM_MOD_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   closed,            1) \
X(a, STATIC,   SINGULAR, UINT32,   period,            2)
#define ZC_CSOM_MOD_CONFIG_CALLBACK NULL
#define ZC_CSOM_MOD_CONFIG_DEFAULT NULL

#define ZC_CSOM_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,mod,config.mod),   2)
#define ZC_CSOM_CONFIG_CALLBACK NULL
#define ZC_CSOM_CONFIG_DEFAULT NULL
#define zc_csom_config_t_config_mod_MSGTYPE zc_csom_mod_config_t

#define ZC_CURVE_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   REPEATED, MESSAGE,  points,            1) \
X(a, STATIC,   SINGULAR, UENUM,    direction,         2)
#define ZC_CURVE_CONFIG_CALLBACK NULL
#define ZC_CURVE_CONFIG_DEFAULT NULL
#define zc_curve_config_t_points_MSGTYPE zc_curve_point_t

#define ZC_OCP_HW_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   limit,             1) \
X(a, STATIC,   SINGULAR, UINT32,   filter,            2) \
X(a, STATIC,   SINGULAR, UINT32,   rec_delay,         3) \
X(a, STATIC,   SINGULAR, UINT32,   rec_attempts,      4) \
X(a, STATIC,   SINGULAR, BOOL,     rec_en,            5) \
X(a, STATIC,   SINGULAR, UINT32,   rec_reset_timeout,   6)
#define ZC_OCP_HW_CONFIG_CALLBACK NULL
#define ZC_OCP_HW_CONFIG_DEFAULT NULL

#define ZC_OUVP_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   lower,             1) \
X(a, STATIC,   SINGULAR, UINT32,   upper,             2) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           3)
#define ZC_OUVP_CONFIG_CALLBACK NULL
#define ZC_OUVP_CONFIG_DEFAULT NULL

#define ZC_OUFP_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   lower,             1) \
X(a, STATIC,   SINGULAR, UINT32,   upper,             2) \
X(a, STATIC,   SINGULAR, BOOL,     enabled,           3)
#define ZC_OUFP_CONFIG_CALLBACK NULL
#define ZC_OUFP_CONFIG_DEFAULT NULL

#define ZC_NOTIF_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   interval,          1)
#define ZC_NOTIF_CONFIG_CALLBACK NULL
#define ZC_NOTIF_CONFIG_DEFAULT NULL

#define ZC_CALIB_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1) \
X(a, STATIC,   SINGULAR, BYTES,    arg,               2)
#define ZC_CALIB_CONFIG_CALLBACK NULL
#define ZC_CALIB_CONFIG_DEFAULT NULL

#define ZC_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,curve,config.curve),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,csom,config.csom),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,ocp_hw,config.ocp_hw),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,ouvp,config.ouvp),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,oufp,config.oufp),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,notif,config.notif),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,calib,config.calib),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,ini,config.ini),   8)
#define ZC_CONFIG_CALLBACK NULL
#define ZC_CONFIG_DEFAULT NULL
#define zc_config_t_config_curve_MSGTYPE zc_curve_config_t
#define zc_config_t_config_csom_MSGTYPE zc_csom_config_t
#define zc_config_t_config_ocp_hw_MSGTYPE zc_ocp_hw_config_t
#define zc_config_t_config_ouvp_MSGTYPE zc_ouvp_config_t
#define zc_config_t_config_oufp_MSGTYPE zc_oufp_config_t
#define zc_config_t_config_notif_MSGTYPE zc_notif_config_t
#define zc_config_t_config_calib_MSGTYPE zc_calib_config_t
#define zc_config_t_config_ini_MSGTYPE zc_ini_state_config_t

#define ZC_REQUEST_VERSION_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_VERSION_CALLBACK NULL
#define ZC_REQUEST_VERSION_DEFAULT NULL

#define ZC_REQUEST_STATUS_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_STATUS_CALLBACK NULL
#define ZC_REQUEST_STATUS_DEFAULT NULL

#define ZC_REQUEST_DEVICE_CMD_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    cmd,               1)
#define ZC_REQUEST_DEVICE_CMD_CALLBACK NULL
#define ZC_REQUEST_DEVICE_CMD_DEFAULT NULL

#define ZC_REQUEST_SET_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  config,            1)
#define ZC_REQUEST_SET_CONFIG_CALLBACK NULL
#define ZC_REQUEST_SET_CONFIG_DEFAULT NULL
#define zc_request_set_config_t_config_MSGTYPE zc_config_t

#define ZC_REQUEST_GET_CONFIG_CURVE_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    direction,         1)
#define ZC_REQUEST_GET_CONFIG_CURVE_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_CURVE_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_CSOM_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_GET_CONFIG_CSOM_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_CSOM_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_OCP_HW_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_GET_CONFIG_OCP_HW_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_OCP_HW_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_OUVP_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_GET_CONFIG_OUVP_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_OUVP_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_OUFP_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_GET_CONFIG_OUFP_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_OUFP_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_NOTIF_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_GET_CONFIG_NOTIF_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_NOTIF_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_CALIB_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1)
#define ZC_REQUEST_GET_CONFIG_CALIB_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_CALIB_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_INI_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   null,              1)
#define ZC_REQUEST_GET_CONFIG_INI_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_INI_DEFAULT NULL

#define ZC_REQUEST_GET_CONFIG_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,curve,config.curve),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,csom,config.csom),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,ocp_hw,config.ocp_hw),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,ouvp,config.ouvp),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,oufp,config.oufp),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,notif,config.notif),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,calib,config.calib),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (config,ini,config.ini),   8)
#define ZC_REQUEST_GET_CONFIG_CALLBACK NULL
#define ZC_REQUEST_GET_CONFIG_DEFAULT NULL
#define zc_request_get_config_t_config_curve_MSGTYPE zc_request_get_config_curve_t
#define zc_request_get_config_t_config_csom_MSGTYPE zc_request_get_config_csom_t
#define zc_request_get_config_t_config_ocp_hw_MSGTYPE zc_request_get_config_ocp_hw_t
#define zc_request_get_config_t_config_ouvp_MSGTYPE zc_request_get_config_ouvp_t
#define zc_request_get_config_t_config_oufp_MSGTYPE zc_request_get_config_oufp_t
#define zc_request_get_config_t_config_notif_MSGTYPE zc_request_get_config_notif_t
#define zc_request_get_config_t_config_calib_MSGTYPE zc_request_get_config_calib_t
#define zc_request_get_config_t_config_ini_MSGTYPE zc_request_get_config_ini_t

#define ZC_ERROR_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   code,              1)
#define ZC_ERROR_CALLBACK NULL
#define ZC_ERROR_DEFAULT NULL

#define ZC_RESPONSE_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (res,version,res.version),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (res,status,res.status),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (res,config,res.config),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (res,error,res.error),   4)
#define ZC_RESPONSE_CALLBACK NULL
#define ZC_RESPONSE_DEFAULT NULL
#define zc_response_t_res_version_MSGTYPE zc_version_t
#define zc_response_t_res_status_MSGTYPE zc_status_t
#define zc_response_t_res_config_MSGTYPE zc_config_t
#define zc_response_t_res_error_MSGTYPE zc_error_t

#define ZC_REQUEST_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (req,version,req.version),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (req,status,req.status),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (req,cmd,req.cmd),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (req,set_config,req.set_config),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (req,get_config,req.get_config),   5)
#define ZC_REQUEST_CALLBACK NULL
#define ZC_REQUEST_DEFAULT NULL
#define zc_request_t_req_version_MSGTYPE zc_request_version_t
#define zc_request_t_req_status_MSGTYPE zc_request_status_t
#define zc_request_t_req_cmd_MSGTYPE zc_request_device_cmd_t
#define zc_request_t_req_set_config_MSGTYPE zc_request_set_config_t
#define zc_request_t_req_get_config_MSGTYPE zc_request_get_config_t

#define ZC_MESSAGE_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,req,msg.req),   1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (msg,res,msg.res),   2)
#define ZC_MESSAGE_CALLBACK NULL
#define ZC_MESSAGE_DEFAULT NULL
#define zc_message_t_msg_req_MSGTYPE zc_request_t
#define zc_message_t_msg_res_MSGTYPE zc_response_t

extern const pb_msgdesc_t zc_version_t_msg;
extern const pb_msgdesc_t zc_temperature_t_msg;
extern const pb_msgdesc_t zc_status_t_msg;
extern const pb_msgdesc_t zc_curve_point_t_msg;
extern const pb_msgdesc_t zc_ini_state_config_t_msg;
extern const pb_msgdesc_t zc_csom_mod_config_t_msg;
extern const pb_msgdesc_t zc_csom_config_t_msg;
extern const pb_msgdesc_t zc_curve_config_t_msg;
extern const pb_msgdesc_t zc_ocp_hw_config_t_msg;
extern const pb_msgdesc_t zc_ouvp_config_t_msg;
extern const pb_msgdesc_t zc_oufp_config_t_msg;
extern const pb_msgdesc_t zc_notif_config_t_msg;
extern const pb_msgdesc_t zc_calib_config_t_msg;
extern const pb_msgdesc_t zc_config_t_msg;
extern const pb_msgdesc_t zc_request_version_t_msg;
extern const pb_msgdesc_t zc_request_status_t_msg;
extern const pb_msgdesc_t zc_request_device_cmd_t_msg;
extern const pb_msgdesc_t zc_request_set_config_t_msg;
extern const pb_msgdesc_t zc_request_get_config_curve_t_msg;
extern const pb_msgdesc_t zc_request_get_config_csom_t_msg;
extern const pb_msgdesc_t zc_request_get_config_ocp_hw_t_msg;
extern const pb_msgdesc_t zc_request_get_config_ouvp_t_msg;
extern const pb_msgdesc_t zc_request_get_config_oufp_t_msg;
extern const pb_msgdesc_t zc_request_get_config_notif_t_msg;
extern const pb_msgdesc_t zc_request_get_config_calib_t_msg;
extern const pb_msgdesc_t zc_request_get_config_ini_t_msg;
extern const pb_msgdesc_t zc_request_get_config_t_msg;
extern const pb_msgdesc_t zc_error_t_msg;
extern const pb_msgdesc_t zc_response_t_msg;
extern const pb_msgdesc_t zc_request_t_msg;
extern const pb_msgdesc_t zc_message_t_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define ZC_VERSION_FIELDS &zc_version_t_msg
#define ZC_TEMPERATURE_FIELDS &zc_temperature_t_msg
#define ZC_STATUS_FIELDS &zc_status_t_msg
#define ZC_CURVE_POINT_FIELDS &zc_curve_point_t_msg
#define ZC_INI_STATE_CONFIG_FIELDS &zc_ini_state_config_t_msg
#define ZC_CSOM_MOD_CONFIG_FIELDS &zc_csom_mod_config_t_msg
#define ZC_CSOM_CONFIG_FIELDS &zc_csom_config_t_msg
#define ZC_CURVE_CONFIG_FIELDS &zc_curve_config_t_msg
#define ZC_OCP_HW_CONFIG_FIELDS &zc_ocp_hw_config_t_msg
#define ZC_OUVP_CONFIG_FIELDS &zc_ouvp_config_t_msg
#define ZC_OUFP_CONFIG_FIELDS &zc_oufp_config_t_msg
#define ZC_NOTIF_CONFIG_FIELDS &zc_notif_config_t_msg
#define ZC_CALIB_CONFIG_FIELDS &zc_calib_config_t_msg
#define ZC_CONFIG_FIELDS &zc_config_t_msg
#define ZC_REQUEST_VERSION_FIELDS &zc_request_version_t_msg
#define ZC_REQUEST_STATUS_FIELDS &zc_request_status_t_msg
#define ZC_REQUEST_DEVICE_CMD_FIELDS &zc_request_device_cmd_t_msg
#define ZC_REQUEST_SET_CONFIG_FIELDS &zc_request_set_config_t_msg
#define ZC_REQUEST_GET_CONFIG_CURVE_FIELDS &zc_request_get_config_curve_t_msg
#define ZC_REQUEST_GET_CONFIG_CSOM_FIELDS &zc_request_get_config_csom_t_msg
#define ZC_REQUEST_GET_CONFIG_OCP_HW_FIELDS &zc_request_get_config_ocp_hw_t_msg
#define ZC_REQUEST_GET_CONFIG_OUVP_FIELDS &zc_request_get_config_ouvp_t_msg
#define ZC_REQUEST_GET_CONFIG_OUFP_FIELDS &zc_request_get_config_oufp_t_msg
#define ZC_REQUEST_GET_CONFIG_NOTIF_FIELDS &zc_request_get_config_notif_t_msg
#define ZC_REQUEST_GET_CONFIG_CALIB_FIELDS &zc_request_get_config_calib_t_msg
#define ZC_REQUEST_GET_CONFIG_INI_FIELDS &zc_request_get_config_ini_t_msg
#define ZC_REQUEST_GET_CONFIG_FIELDS &zc_request_get_config_t_msg
#define ZC_ERROR_FIELDS &zc_error_t_msg
#define ZC_RESPONSE_FIELDS &zc_response_t_msg
#define ZC_REQUEST_FIELDS &zc_request_t_msg
#define ZC_MESSAGE_FIELDS &zc_message_t_msg

/* Maximum encoded size of messages (where known) */
#define ZC_CALIB_CONFIG_SIZE                     12
#define ZC_CONFIG_SIZE                           229
#define ZC_CSOM_CONFIG_SIZE                      16
#define ZC_CSOM_MOD_CONFIG_SIZE                  12
#define ZC_CURVE_CONFIG_SIZE                     226
#define ZC_CURVE_POINT_SIZE                      12
#define ZC_ERROR_SIZE                            6
#define ZC_INI_STATE_CONFIG_SIZE                 2
#define ZC_MESSAGE_SIZE                          238
#define ZC_NOTIF_CONFIG_SIZE                     6
#define ZC_OCP_HW_CONFIG_SIZE                    32
#define ZC_OUFP_CONFIG_SIZE                      14
#define ZC_OUVP_CONFIG_SIZE                      14
#define ZC_REQUEST_DEVICE_CMD_SIZE               2
#define ZC_REQUEST_GET_CONFIG_CALIB_SIZE         2
#define ZC_REQUEST_GET_CONFIG_CSOM_SIZE          6
#define ZC_REQUEST_GET_CONFIG_CURVE_SIZE         2
#define ZC_REQUEST_GET_CONFIG_INI_SIZE           6
#define ZC_REQUEST_GET_CONFIG_NOTIF_SIZE         6
#define ZC_REQUEST_GET_CONFIG_OCP_HW_SIZE        6
#define ZC_REQUEST_GET_CONFIG_OUFP_SIZE          6
#define ZC_REQUEST_GET_CONFIG_OUVP_SIZE          6
#define ZC_REQUEST_GET_CONFIG_SIZE               8
#define ZC_REQUEST_SET_CONFIG_SIZE               232
#define ZC_REQUEST_SIZE                          235
#define ZC_REQUEST_STATUS_SIZE                   6
#define ZC_REQUEST_VERSION_SIZE                  6
#define ZC_RESPONSE_SIZE                         232
#define ZC_STATUS_SIZE                           92
#define ZC_TEMPERATURE_SIZE                      13
#define ZC_VERSION_SIZE                          43

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
